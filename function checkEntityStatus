pm.globals.set("checkEntityStatus", `function checkEntityStatus(checks) {
    if (!Array.isArray(checks)) {
        checks = [checks]; // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    }

    checks.forEach(check => {
        const { entityType, expectedStatuses, idVariableOrArray } = check;
        const enableStatus = pm.globals.get("ENABLE_STATUS_CHECK");
        if (!(enableStatus === true || enableStatus === "true")) return;

        const retrySettings = JSON.parse(pm.globals.get("RETRY_SETTINGS")).STATUS_CHECK;
        const logSettings = JSON.parse(pm.globals.get("LOG_SETTINGS")).STATUS_CHECK;
        const serviceConfig = JSON.parse(pm.globals.get("STATUS_CHECKERS_CONFIG"))[entityType];

        if (!serviceConfig) throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: " + entityType);

        const finalRetry = { ...retrySettings };
        const finalLog = { ...logSettings };

        const idVariables = Array.isArray(idVariableOrArray) ? idVariableOrArray : [idVariableOrArray];
        const targetStatuses = Array.isArray(expectedStatuses) ? expectedStatuses : [expectedStatuses];

        function log(message, emoji = "") {
            if (finalLog.VERBOSE) {
                console.log(\`\${finalLog.PREFIX} \${serviceConfig.type} \${emoji} \${message}\`);
            }
        }

        function checkSingleId(idVariable) {
            let attemptCount = 0;
            const statusesString = targetStatuses.join('", "');

            function fetchStatus() {
                let url = \`https://\${serviceConfig.serviceName}\${pm.globals.get("env")}\${serviceConfig.endpoint}\`;

                if (serviceConfig.queryParam) {
                    url += \`?\${serviceConfig.queryParam}=\${encodeURIComponent(idVariable)}\`;
                } else {
                    url += \`/\${idVariable}\`;
                }

                pm.sendRequest({ url: url, method: 'GET' }, (err, res) => {
                    attemptCount++;

                    if (err) {
                        log(\`–ü–æ–ø—ã—Ç–∫–∞ \${attemptCount}/\${finalRetry.MAX_ATTEMPTS} (ID: \${idVariable}): \${err.message}\`, "‚ö†Ô∏è");
                        if (attemptCount < finalRetry.MAX_ATTEMPTS) {
                            setTimeout(fetchStatus, finalRetry.DELAY_MS);
                        }
                        return;
                    }

                    const data = res.json();
                    const dataObj = Array.isArray(data) ? data[0] : data;
                    const currentStatus = dataObj?.status;

                    if (targetStatuses.includes(currentStatus)) {
                        log(\`–£—Å–ø–µ—Ö: —Å—Ç–∞—Ç—É—Å "\${currentStatus}" (ID: \${idVariable})\`, "‚úÖ");
                        pm.test(\`–°—Ç–∞—Ç—É—Å \${currentStatus} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è \${serviceConfig.type} (ID: \${idVariable})\`, () => {
                            pm.expect(targetStatuses).to.include(currentStatus);
                        });
                    } else if (attemptCount < finalRetry.MAX_ATTEMPTS) {
                        log(\`–¢–µ–∫—É—â–∏–π: "\${currentStatus || '–Ω–µ—Ç'}", –æ–∂–∏–¥–∞–µ—Ç—Å—è: "\${statusesString}" (ID: \${idVariable})\`, "üîÑ");
                        setTimeout(fetchStatus, finalRetry.DELAY_MS);
                    } else {
                        pm.test(\`–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è \${serviceConfig.type} (ID: \${idVariable})\`, () => {
                            pm.expect.fail(\`–û–∂–∏–¥–∞–ª–æ—Å—å: "\${statusesString}", –ø–æ–ª—É—á–µ–Ω: "\${currentStatus}"\`);
                        });
                    }
                });
            }

            log(\`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è: "\${statusesString}") –¥–ª—è ID: \${idVariable}\`);
            fetchStatus();
        }

        idVariables.forEach(id => {
            if (id) checkSingleId(id);
        });
    });
}`);
