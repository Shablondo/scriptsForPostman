pm.globals.set("fetchDirectRouteForOrder", `function fetchDirectRouteForOrder(response, customSettings = {}) {
    const logSettings = JSON.parse(pm.globals.get("LOG_SETTINGS")).ROUTE_PROCESS;
    if (!logSettings) throw new Error("–ö–æ–Ω—Ñ–∏–≥ ROUTE_PROCESS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LOG_SETTINGS");

    function log(message, emoji = "", force = false) {
        if (logSettings.VERBOSE || force) {
            console.log(\`\${logSettings.PREFIX} \${emoji} \${message}\`);
        }
    }

    log("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ route...", "üöÄ");

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (!response || !Array.isArray(response) || response.length === 0) {
        log("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", "‚ùå", true);
        if (typeof customSettings.onComplete === "function") customSettings.onComplete(false);
        return;
    }

    const route = response[0];

    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const { end: receiverLocationId, start: senderLocationId } = route;
    pm.environment.set("receiverLocationId", receiverLocationId);
    pm.environment.set("senderLocationId", senderLocationId);
    log("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã receiverLocationId –∏ senderLocationId.", "‚úÖ");

    const storeLeg = route.route?.find(leg => leg.finalLocationType === "STORE");
    if (storeLeg) {
        pm.collectionVariables.set("lastWhForJourney", storeLeg.initialLocationId);
        pm.collectionVariables.set("storeForJourney", storeLeg.finalLocationId);
        log("–ù–∞–π–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω store leg.", "‚úÖ");
    } else {
        log("Store leg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ.", "‚ÑπÔ∏è");
    }

    // 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ —á–µ—Ä–µ–∑ fetchEntityVariables
    if (!senderLocationId) {
        log("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç senderLocationId –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", "‚ö†Ô∏è", true);
        if (typeof customSettings.onComplete === "function") customSettings.onComplete(false);
        return;
    }

    eval(pm.globals.get("fetchEntityVariables"));

    fetchEntityVariables({
        entityType: "LOCATION",
        entityIdOrArray: senderLocationId,
        variablesMapping: [
            { envVar: "partnerLocationId", field: "partnerLocationId" },
            { envVar: "contractorId", field: "contractorId" }
        ]
    }, {
        onComplete: function(success) {
            if (success) {
                if (!pm.environment.get("partnerLocationId")) {
                    pm.environment.set("partnerLocationId", senderLocationId);
                }
                if (!pm.environment.get("contractorId")) {
                    pm.environment.set("contractorId", '');
                }
                log("–î–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.", "üéâ");
            } else {
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "‚ö†Ô∏è");
                pm.environment.set("partnerLocationId", senderLocationId);
                pm.environment.set("contractorId", '');
            }
            if (typeof customSettings.onComplete === "function") customSettings.onComplete(success);
        }
    });
}
`);
