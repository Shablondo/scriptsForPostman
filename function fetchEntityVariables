pm.globals.set("fetchEntityVariables", `function fetchEntityVariables({ entityType, entityIdOrArray, variablesMapping }, customSettings = {}) {
    const retrySettings = JSON.parse(pm.globals.get("RETRY_SETTINGS")).VARIABLES_FETCH;
    const logSettings = JSON.parse(pm.globals.get("LOG_SETTINGS")).VARIABLES_FETCH;
    const serviceConfig = JSON.parse(pm.globals.get("VARIABLES_FETCH_CONFIGS"))[entityType];

    if (!serviceConfig) throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: " + entityType);

    const finalRetry = { ...retrySettings, ...customSettings.retry };
    const finalLog = { ...logSettings, ...customSettings.log };
    let attemptCount = 0;
    const missingVarsHistory = new Set();

    function log(message, emoji = "", force = false) {
        if (finalLog.VERBOSE || force) {
            console.log(\`\${finalLog.PREFIX} [\${serviceConfig.type}] \${emoji} \${message}\`);
        }
    }

    function execute() {
        attemptCount++;
        log(\`–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø–æ–ø—ã—Ç–∫–∞ \${attemptCount}/\${finalRetry.MAX_ATTEMPTS})\`, "üîç");

        let url = \`https://\${serviceConfig.serviceName}\${pm.globals.get("env")}\${serviceConfig.endpoint}\`;
        let request;

        if (serviceConfig.queryParam) {
            const paramValue = Array.isArray(entityIdOrArray) ? entityIdOrArray[0] : entityIdOrArray;
            url += \`?\${serviceConfig.queryParam}=\${encodeURIComponent(paramValue)}\`;
            request = { url: url, method: 'GET' };
        } else if (Array.isArray(entityIdOrArray)) {
            request = {
                url: url,
                method: 'POST',
                header: { 'Content-Type': 'application/json' },
                body: { mode: 'raw', raw: JSON.stringify({ is_active: true, cargoIds: entityIdOrArray }) }
            };
        } else {
            url += entityIdOrArray ? \`/\${entityIdOrArray}\` : '';
            request = { url: url, method: 'GET' };
        }

        pm.sendRequest(request, (err, res) => {
            if (err) return handleError(\`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \${err.message}\`);
            try {
                const data = res.json();
                const dataObj = Array.isArray(data) ? data[0] : data;
                processVariables(dataObj);
            } catch (error) {
                handleError(\`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: \${error.message}\`);
            }
        });
    }

    function processVariables(data) {
        const missingVars = [];
        (variablesMapping || []).forEach(({ envVar, collectionVar, localVar, field, legType, legIndex = 0 }) => {
            let value;
            if (!legType) {
                value = data?.[field];
            } else {
                const legs = Array.isArray(data.cargoLegs)
                    ? data.cargoLegs.filter(l => l.cargoLegType === legType)
                    : [];
                value = legs[legIndex]?.[field];
            }
            const varName = collectionVar || envVar || localVar;
            if (localVar) {
                pm.variables.set(localVar, value);
            } else if (collectionVar) {
                pm.collectionVariables.set(collectionVar, value);
            } else if (envVar) {
                pm.environment.set(envVar, value);
            }
            if (value === null || value === undefined) {
                missingVars.push(varName);
            }
        });

        if (missingVars.length > 0) {
            missingVars.forEach(v => missingVarsHistory.add(v));
            log(\`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: \${missingVars.join(', ')}\`, "‚ö†Ô∏è", true);
            handleRetry(\`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: \${missingVars.join(', ')}\`);
        } else {
            log("–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã", "üéâ", true);
            pm.test(\`–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ \${serviceConfig.type}\`, () => pm.expect(true).to.be.true);
            if (typeof customSettings.onComplete === "function") customSettings.onComplete(true);
        }
    }

    function handleError(message) {
        log(message, "‚ö†Ô∏è", true);
        handleRetry(message);
    }

    function handleRetry(message) {
        if (attemptCount < finalRetry.MAX_ATTEMPTS) {
            log(\`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ \${finalRetry.DELAY_MS}ms...\`, "üîÑ");
            setTimeout(execute, finalRetry.DELAY_MS);
        } else {
            const allMissing = Array.from(missingVarsHistory).join(', ');
            pm.test(\`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å \${serviceConfig.type}\`, () => {
                pm.expect.fail(\`–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: \${allMissing || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\`);
            });
            if (typeof customSettings.onComplete === "function") customSettings.onComplete(false);
        }
    }

    if (!entityIdOrArray) throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º entityId –∏–ª–∏ –º–∞—Å—Å–∏–≤ cargoIds");
    if (!variablesMapping) throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º variablesMapping");

    execute();
}`);


–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:

eval(pm.globals.get("fetchEntityVariables"));

fetchEntityVariables({
    entityType: "DELIVERY_TASK",
    entityIdOrArray: [pm.environment.get("cargoId1")],
    variablesMapping: [
        { envVar: "omniBarcodeForCargoId1", field: "barcode" },
        { envVar: "shipmentIdForCargoId1", field: "shipmentId", legIndex: 0, legType: "FIRST_MILE" },
        { envVar: "currentLocationId", field: "receiverId", legIndex: 0, legType: "FIRST_MILE" },
        { envVar: "currentCargoLegForCargoId1", field: "id", legIndex: 0, legType: "MIDDLE_MILE" },
        { envVar: "nextLocationId", field: "receiverId", legIndex: 0, legType: "MIDDLE_MILE" },
        { collectionVar: "cargoLegNoForCargo1", field: "cargoLegNo", legIndex: 0, legType: "MIDDLE_MILE" }
    ]
});

